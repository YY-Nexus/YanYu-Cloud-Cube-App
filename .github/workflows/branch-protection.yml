name: Branch Protection & Auto Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  check-merge-ready:
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || github.event_name == 'check_suite' || github.event_name == 'status'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Check if PR is ready for auto-merge
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber;

            // Get PR number from different event types
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'pull_request_review') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'check_suite') {
              // For check_suite, we need to find the PR
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.payload.check_suite.head_branch}`,
                state: 'open'
              });
              if (prs.data.length > 0) {
                prNumber = prs.data[0].number;
              }
            } else if (context.eventName === 'status') {
              // For status, we need to find the PR from the commit
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });
              const pr = prs.data.find(pr => pr.head.sha === context.payload.sha);
              if (pr) {
                prNumber = pr.number;
              }
            }

            if (!prNumber) {
              console.log('No PR found for this event');
              return;
            }

            console.log(`Checking PR #${prNumber} for auto-merge eligibility`);

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Skip if PR is draft or already merged
            if (pr.draft || pr.merged) {
              console.log('PR is draft or already merged, skipping');
              return;
            }

            // Check if PR has auto-merge label or is from automation
            const hasAutoMergeLabel = pr.labels.some(label => label.name === 'auto-merge');
            const isAutomationPR = pr.head.ref.startsWith('dependabot/') || 
                                  pr.head.ref.startsWith('renovate/') ||
                                  pr.head.ref.startsWith('chore/autofix') ||
                                  pr.title.startsWith('chore:') ||
                                  pr.title.startsWith('docs:');

            if (!hasAutoMergeLabel && !isAutomationPR) {
              console.log('PR is not eligible for auto-merge (no label or not automation)');
              return;
            }

            // Get reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const latestReviews = {};
            reviews.forEach(review => {
              latestReviews[review.user.login] = review.state;
            });

            const hasApproval = Object.values(latestReviews).includes('APPROVED');
            const hasChangesRequested = Object.values(latestReviews).includes('CHANGES_REQUESTED');

            // Check status checks
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });

            const checksPassing = checks.check_runs.every(check => 
              check.status === 'completed' && 
              (check.conclusion === 'success' || check.conclusion === 'neutral')
            );

            // Auto-merge logic
            if ((hasApproval || isAutomationPR) && !hasChangesRequested && checksPassing) {
              console.log('PR is ready for auto-merge!');
              
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  merge_method: 'squash',
                  commit_title: `${pr.title} (#${prNumber})`,
                  commit_message: `${pr.body || ''}\n\nAuto-merged by GitHub Actions`
                });
                
                console.log(`Successfully auto-merged PR #${prNumber}`);
                
                // Add comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: 'üéâ This PR has been automatically merged!'
                });
                
              } catch (error) {
                console.log(`Failed to auto-merge PR #${prNumber}: ${error.message}`);
                
                // Add comment about the failure
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `‚ùå Auto-merge failed: ${error.message}\n\nPlease merge manually or resolve any conflicts.`
                });
              }
            } else {
              console.log(`PR #${prNumber} not ready for auto-merge:`);
              console.log(`- Has approval: ${hasApproval}`);
              console.log(`- Is automation PR: ${isAutomationPR}`);
              console.log(`- Has changes requested: ${hasChangesRequested}`);
              console.log(`- Checks passing: ${checksPassing}`);
            }

  update-branch-protection:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Update branch protection rules
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.repos.updateBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main',
                required_status_checks: {
                  strict: true,
                  contexts: ['build-test']
                },
                enforce_admins: false,
                required_pull_request_reviews: {
                  required_approving_review_count: 1,
                  dismiss_stale_reviews: true,
                  require_code_owner_reviews: false
                },
                restrictions: null,
                allow_force_pushes: false,
                allow_deletions: false
              });
              console.log('Branch protection updated successfully');
            } catch (error) {
              console.log(`Failed to update branch protection: ${error.message}`);
            }
